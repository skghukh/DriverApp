package com.rodafleets.app.controller;

import java.io.File;
import java.util.List;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.security.crypto.bcrypt.BCrypt;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.multipart.MultipartFile;

import com.rodafleets.app.auth.jwt.JwtTokenUtil;
import com.rodafleets.app.config.AppConfig;
import com.rodafleets.app.dataaccess.DriverDocsRepository;
import com.rodafleets.app.dataaccess.DriverRepository;
import com.rodafleets.app.exception.CustomException;
import com.rodafleets.app.model.Driver;
import com.rodafleets.app.model.DriverDocs;
import com.rodafleets.app.response.CustomResponse;
import com.rodafleets.app.response.DriverResponse;
import com.rodafleets.app.service.FileArchiveService;
import com.rodafleets.app.service.OTPService;

/*===================  Driver API  =================== */

@RestController // This means that this class is a Controller
@RequestMapping(path = "/" + AppConfig.API_VERSION + "/drivers") // This means
// URL's
// start
// with
// /customers
// after API
// base url
public class DriverController {

	private final Log logger = LogFactory.getLog(this.getClass());
	private CustomResponse jsonResponse;
	BCryptPasswordEncoder passwordEncoder = new BCryptPasswordEncoder();

	@Autowired // This means to get the bean called userRepository
	// Which is auto-generated by Spring, we will use it to handle the data
	private DriverRepository driverRepo;

	@Autowired
	private DriverDocsRepository driverDocsRepo;

	@Autowired
	private FileArchiveService fileArchiveService;

	/*
	 * Retrive all drivers and their info
	 * 
	 * @Url: API_URL/API_VERSION/drivers
	 */
	@RequestMapping(method = RequestMethod.GET)
	public ResponseEntity<?> getAll() {
		return findAllDrivers();
	}

	/*
	 * Search drivers with specified firstname
	 * 
	 * @RequestParam: firstname
	 * 
	 * @Url: API_URL/API_VERSION/drivers?firstname=?
	 */
	@RequestMapping(method = RequestMethod.GET, params = "firstname")
	public ResponseEntity<?> getDriverByFirtsName(
			@RequestParam(value = "firstname") String firstName) {
		return findDriverByFirstName(firstName);
	}

	/*
	 * Search drivers with specified firstname and lastname
	 * 
	 * @RequestParam: firstname
	 * @RequestParam: lastname
	 * 
	 * @Url: API_URL/API_VERSION/drivers?firstname=?&lastname=?
	 */
	@RequestMapping(method = RequestMethod.GET, params = "{firstname, lastname}")
	public ResponseEntity<?> getDriverByFirstAndLastName(
			@RequestParam(value = "firstname") String firstName,
			@RequestParam(value = "lastname") String lastName) {
		return findDriverByFirstAndLastName(firstName, lastName);
	}

	/*
	 * 
	 * @RequestParam: firstname
	 * @RequestParam: lastname
	 * 
	 * @Url: API_URL/API_VERSION/drivers/
	 */

	@RequestMapping(method = RequestMethod.POST)
	public ResponseEntity<?> saveDriver(
			@RequestParam(value = "phonenumber") String phoneNumber,
			@RequestParam(value = "firstname") String firstName, 
			@RequestParam(value = "lastname") String lastName,
			@RequestParam(value = "gender") String gender,
			@RequestParam(value = "android_token", required = false) String androidToken,
			@RequestParam(value = "ios_token", required = false) String iosToken) {
		return addDriver(phoneNumber, firstName, lastName, gender, androidToken, iosToken);
	}

	/*
	 * 
	 * @RequestParam: firstname
	 * @RequestParam: lastname
	 * 
	 * @Url: localhost:8080/drivers/1?firstname=?&lastname=?
	 */
	@RequestMapping(value = "/{id}", method = RequestMethod.POST)
	public ResponseEntity<?> updateDriver(@PathVariable("id") long id,
			@RequestParam(value = "otp", required = false) String otp,
			@RequestParam(value = "session_id", required = false) String sessionId,
			@RequestParam(value = "firstname", required = false) String firstName,
			@RequestParam(value = "lastname", required = false) String lastName,
			@RequestParam(value = "gender", required = false) String gender,
			@RequestParam(value = "status", required = false, defaultValue = "0") int status,
			@RequestParam(value = "password", required = false) String password) {
		return editDriver(id, otp, sessionId, firstName, lastName, gender, password);
	}
	
	@RequestMapping(value = "/{id}/updateandroidtoken", method = RequestMethod.POST)
	public ResponseEntity<?> updateDriver(@PathVariable("id") long driverId,
			@RequestParam(value = "token", required = false) String token) {
		return updateAndroidToken(driverId, token);
	}

	/*
	 * 
	 * @RequestParam: document1
	 * @RequestParam: document2
	 * @RequestParam: document3
	 * 
	 * @Url: localhost:8080/drivers/1/uploaddocuments
	 */
	@RequestMapping(value = "/{id}/uploaddocuments", method = RequestMethod.POST)
	public ResponseEntity<?> saveDriverDocs(@PathVariable("id") long driverId,
			@RequestParam(value = "document1") MultipartFile document1,
			@RequestParam(value = "document2", required = false) MultipartFile document2,
			@RequestParam(value = "document3", required = false) MultipartFile document3) {
		return addDriverDocs(driverId, document1, document2, document3);
	}

	//	/*
	//	 * 
	//	 * @RequestParam: document1
	//	 * @RequestParam: document2
	//	 * 
	//	 * @Url: localhost:8080/drivers/1?firstname=?&lastname=?
	//	 */
	//	@RequestMapping(value = "/{id}/uploaddocuments", method = RequestMethod.POST)
	//	public ResponseEntity<?> saveDriverDocs(@PathVariable("id") long driverId,
	//			@RequestParam(value = "documents") File[] documents) {
	//		return addDriverDocs(driverId, documents);
	//	}

	/*
	 * 
	 * @RequestParam: phonenumber
	 * 
	 * @RequestParam: password
	 * 
	 * @Url: localhost:8080/drivers/login?phonenumber=?&password=?
	 */
	@RequestMapping(value = "/login", method = RequestMethod.POST)
	public ResponseEntity<?> login(@RequestParam(value = "phonenumber") String phoneNumber,
			@RequestParam(value = "password") String password) {
		return signin(phoneNumber, password);
	}

	/* ===== ====== */

	private ResponseEntity<?> findAllDrivers() {
		jsonResponse = new CustomResponse();
		List<Driver> drivers = driverRepo.findAll();
		//
		if (drivers.isEmpty()) {
			jsonResponse.setCode(HttpStatus.NO_CONTENT.value());
			jsonResponse.setMessage("driverinfo not found");
			return new ResponseEntity<CustomResponse>(jsonResponse, HttpStatus.NO_CONTENT);
		}
		return new ResponseEntity<List>(drivers, HttpStatus.OK);
	}

	private ResponseEntity<?> findDriverByFirstName(String firstName) {
		jsonResponse = new CustomResponse();
		List<Driver> drivers = driverRepo.findByFirstnameAllIgnoreCase(firstName);
		if (drivers.isEmpty()) {
			logger.info("search returned empty");
			jsonResponse.setCode(AppConfig.NO_RESULTS);
			jsonResponse.setMessage("No results for given search");
			return new ResponseEntity<CustomResponse>(jsonResponse, HttpStatus.NO_CONTENT);
		}
		return new ResponseEntity<List>(drivers, HttpStatus.CREATED);
	}

	private ResponseEntity<?> findDriverByFirstAndLastName(String firstName, String LastName) {
		jsonResponse = new CustomResponse();
		List<Driver> drivers = driverRepo.findByLastnameAndFirstnameAllIgnoreCase(firstName, firstName);
		if (drivers.isEmpty()) {
			logger.info("search returned empty");
			jsonResponse.setCode(AppConfig.NO_RESULTS);
			jsonResponse.setMessage("No results for given search");
			return new ResponseEntity<CustomResponse>(jsonResponse, HttpStatus.NO_CONTENT);
		}
		return new ResponseEntity<List>(drivers, HttpStatus.OK);
	}

	private ResponseEntity<?> addDriver(String phoneNumber, String firstName, String lastName, String gender, String androidToken, String iosToken) {
		
		DriverResponse jsonResponse = new DriverResponse();
		if(androidToken == "" && iosToken == "") {
			jsonResponse.setMessage("Registration Token missing");
			return new ResponseEntity<DriverResponse>(jsonResponse, HttpStatus.BAD_REQUEST);
		}
		String otpSessionId;
		// send sms to verify the phoneNumber
		otpSessionId = sendOTP(phoneNumber);
		logger.info("optsent session id = " + otpSessionId);
		if (otpSessionId.equals("0")) {
			jsonResponse.setCode(AppConfig.SENDING_OTP_FAILED);
			jsonResponse.setMessage("Sending OTP failed");
			return new ResponseEntity<DriverResponse>(jsonResponse, HttpStatus.INTERNAL_SERVER_ERROR);
		} else {
			Driver driver = new Driver(phoneNumber, firstName, lastName, gender);
			driver.setPassword(""); // default value
			if(!androidToken.equals("")) {
				driver.setAndroidToken(androidToken);
			}
			
			if(!iosToken.equals("")) {
				driver.setIosToken(iosToken);
			}
			driverRepo.save(driver);

			jsonResponse.setDriver(driver);
			jsonResponse.setSessionId(otpSessionId);
			jsonResponse.setMessage("Driver info saved");
		}

		return new ResponseEntity<DriverResponse>(jsonResponse, HttpStatus.OK);
	}

	private ResponseEntity<?> editDriver(long id, String otp, String sessionId, String firstName, String lastName,
			String gender, String password) {
		jsonResponse = new CustomResponse();
		//		try {
		Driver driver = driverRepo.findOne(id);
		// check if phone verification is completed, if so just update the
		// driver info.
		if (driver.getVerified() == 0) {
			logger.info("phone verification not comepleted");
			Boolean otpVerified = true;
			// let's verify the OTP.
			if (otp != null && !otp.isEmpty()) {
				// check if sessionId is sent in the request
				if (sessionId != null && !sessionId.isEmpty()) {
					OTPService otpService = new OTPService();
					otpVerified = otpService.verifyOTP(sessionId, otp);
					if (otpVerified) {
						driver.setVerified(1);
					} else {
						jsonResponse.setCode(AppConfig.INVALID_OTP);
						jsonResponse.setMessage("Invalid OTP");
						return new ResponseEntity<CustomResponse>(jsonResponse, HttpStatus.PRECONDITION_FAILED);
					}
				} else {
					jsonResponse.setCode(AppConfig.SESSION_ID_REQUIRED_FOR_OTP_VERIFICATION);
					jsonResponse.setMessage("Session Id is required to verify OTP");
					return new ResponseEntity<CustomResponse>(jsonResponse, HttpStatus.BAD_REQUEST);
				}
			} else {
				jsonResponse.setCode(AppConfig.PHONE_NOT_VERIFIED);
				jsonResponse.setMessage("Phonenumber is not verified, Please verify");
				return new ResponseEntity<CustomResponse>(jsonResponse, HttpStatus.BAD_REQUEST);
			}
		}

		if (firstName != null && !firstName.isEmpty()) {
			driver.setFirstName(firstName);
		}

		if (lastName != null && !lastName.isEmpty()) {
			driver.setLastName(lastName);
		}

		if (gender != null && !gender.isEmpty()) {
			driver.setGender(gender);
		}

		if (password != null && !password.isEmpty()) {
			// driver.setPassword(passwordEncoder.encode(password));
			driver.setPassword(password);
		}

		driverRepo.save(driver);
		//		} catch (Exception ex) {
		//			jsonResponse.setCode(HttpStatus.INTERNAL_SERVER_ERROR.value());
		//			jsonResponse.setMessage(ex.getMessage());
		//			return new ResponseEntity<CustomResponse>(jsonResponse, HttpStatus.PRECONDITION_FAILED);
		//		}

		jsonResponse.setMessage("Driver info updated!");
		return new ResponseEntity<CustomResponse>(jsonResponse, HttpStatus.OK);
	}
	
	private ResponseEntity<?> updateAndroidToken(long driverId, String token) {
		jsonResponse = new CustomResponse();
		//		try {
		Driver driver = driverRepo.findOne(driverId);
		driver.setAndroidToken(token);
		driverRepo.save(driver);
		
		jsonResponse.setMessage("Driver info updated!");
		return new ResponseEntity<CustomResponse>(jsonResponse, HttpStatus.OK);
	}
	
	private ResponseEntity<?> updateiosToken(long driverId, String token) {
		jsonResponse = new CustomResponse();
		//		try {
		Driver driver = driverRepo.findOne(driverId);
		driver.setIosToken(token);
		driverRepo.save(driver);
		
		jsonResponse.setMessage("Driver info updated!");
		return new ResponseEntity<CustomResponse>(jsonResponse, HttpStatus.OK);
	}

	private ResponseEntity<?> addDriverDocs(long driverId, MultipartFile doc1, MultipartFile doc2, MultipartFile doc3) {
		jsonResponse = new CustomResponse();
		if (doc1 != null) {
			logger.info("uploading document 1");
			try {
				String url = fileArchiveService.saveFileToS3(doc1, null);
				DriverDocs driverDocs = new DriverDocs(driverId, url);
				driverDocsRepo.save(driverDocs);
			} catch (Exception ex) {
				jsonResponse.setMessage(ex.getMessage());
				return new ResponseEntity<CustomResponse>(jsonResponse, HttpStatus.PRECONDITION_FAILED);
			}
		} 

		if (doc2 != null) {
			logger.info("uploading document 2");
			try {
				String url = fileArchiveService.saveFileToS3(doc2, null);
				DriverDocs driverDocs = new DriverDocs(driverId, url);
				driverDocsRepo.save(driverDocs);
			} catch (Exception ex) {
				jsonResponse.setMessage(ex.getMessage());
				return new ResponseEntity<CustomResponse>(jsonResponse, HttpStatus.PRECONDITION_FAILED);
			}
		}

		if (doc3 != null) {
			logger.info("uploading document 3");
			try {
				String url = fileArchiveService.saveFileToS3(doc3, null);
				DriverDocs driverDocs = new DriverDocs(driverId, url);
				driverDocsRepo.save(driverDocs);
			} catch (Exception ex) {
				jsonResponse.setMessage(ex.getMessage());
				return new ResponseEntity<CustomResponse>(jsonResponse, HttpStatus.PRECONDITION_FAILED);
			}
		}

		jsonResponse.setMessage("Driver documents saved");
		return new ResponseEntity<CustomResponse>(jsonResponse, HttpStatus.OK);
	}

	private ResponseEntity<?> addDriverDocs(long driverId, File[] documents) {
		for (File file : documents) {
			try{
				String url = fileArchiveService.saveFileToS3(file, null);
				DriverDocs driverDocs = new DriverDocs(driverId, url);
				driverDocsRepo.save(driverDocs);
			} catch (Exception e){
				jsonResponse.setMessage(e.getMessage());
				return new ResponseEntity<CustomResponse>(jsonResponse, HttpStatus.PRECONDITION_FAILED);
			}
		}
		jsonResponse.setMessage("Driver documents saved");
		return new ResponseEntity<CustomResponse>(jsonResponse, HttpStatus.OK);
	}

	private String sendOTP(String phoneNumber) {
		OTPService otpService = new OTPService();
		return otpService.sendOTP(phoneNumber);
	}

	private ResponseEntity<?> signin(String phoneNumber, String password) {

		DriverResponse jsonResponse = new DriverResponse();
//		Driver driver = driverRepo.findOneByPhoneNumberAndPassword(phoneNumber, passwordEncoder.encode(password));
		Driver driver = driverRepo.findOneByPhoneNumberAndPassword(phoneNumber, password);
		if(driver != null) {			
//			JwtTokenUtil util = new JwtTokenUtil();
//			String token = util.generateDriverToken(driver);
//			logger.info("api auth JWT = " + token);
//			jsonResponse.setToken(token);
			jsonResponse.setMessage("Success");
			jsonResponse.setDriver(driver);
			return new ResponseEntity<CustomResponse>(jsonResponse, HttpStatus.OK);
		} else {
			jsonResponse.setCode(AppConfig.INVALID_CREDENTIALS);
			jsonResponse.setMessage("Login failed");
			return new ResponseEntity<CustomResponse>(jsonResponse, HttpStatus.BAD_REQUEST);
		}
	}

}