package com.rodafleets.app.controller;

import java.util.List;
import java.util.stream.Collectors;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.util.Pair;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.rodafleets.app.config.AppConfig;
import com.rodafleets.app.dataaccess.CustomerRepository;
import com.rodafleets.app.dataaccess.DriverLocationRepository;
import com.rodafleets.app.model.Customer;
import com.rodafleets.app.model.Driverlocation;
import com.rodafleets.app.response.CustomResponse;
import com.rodafleets.app.response.CustomerResponse;
import com.rodafleets.app.response.NearyByDriversResponse;
import com.rodafleets.app.service.OTPService;

/*===================  Cutsomer API  =================== */

@RestController // This means that this class is a Controller
@RequestMapping(path = "/" + AppConfig.API_VERSION + "/customers") // This means
																	// URL's
																	// start
																	// with
																	// /customers
																	// after API
																	// base url
public class CustomerController {

	private static final Logger log = LoggerFactory.getLogger(DriverController.class);
	private CustomResponse jsonResponse;

	@Autowired // This means to get the bean called userRepository
	// Which is auto-generated by Spring, we will use it to handle the data
	private CustomerRepository customerRepo;

	@Autowired // repository for driver location
	private DriverLocationRepository driverLocRepo;

	/*
	 * Retrive all customers and their info
	 * 
	 * @Url: localhost:8080/customers
	 */
	@RequestMapping(method = RequestMethod.GET)
	public ResponseEntity<?> getAll() {
		return findAllCustomers();
	}

	/*
	 * Search customers with specified firstname
	 * 
	 * @RequestParam: firstname
	 * 
	 * @Url: localhost:8080/customers?firstname=?
	 */
	@RequestMapping(method = RequestMethod.GET, params = "firstname")
	public ResponseEntity<?> getDriverByFirtsName(@RequestParam(value = "firstname") String firstName) {
		return findCustomersByFirstName(firstName);
	}

	/*
	 * Search customers with specified firstname and lastname
	 * 
	 * @RequestParam: firstname
	 * 
	 * @RequestParam: lastname
	 * 
	 * @Url: localhost:8080/customers?firstname=?&lastname=?
	 */
	@RequestMapping(method = RequestMethod.GET, params = "{firstname, lastname}")
	public ResponseEntity<?> getDriverByFirstAndLastName(@RequestParam(value = "firstname") String firstName,
			@RequestParam(value = "lastname") String lastName) {
		return findCustomersByFirstAndLastName(firstName, lastName);
	}

	@RequestMapping(method = RequestMethod.POST)
	public ResponseEntity<?> saveCustomer(@RequestParam(value = "phonenumber") String phoneNumber,
			@RequestParam(value = "firstname") String firstName, @RequestParam(value = "lastname") String lastName,
			@RequestParam(value = "gender") String gender,
			@RequestParam(value = "android_token", required = false) String androidToken,
			@RequestParam(value = "ios_token", required = false) String iosToken) {
		return addCustomer(phoneNumber, firstName, lastName, gender);
	}

	/*
	 * 
	 * @RequestParam: firstname
	 * 
	 * @RequestParam: lastname
	 * 
	 * @Url: localhost:8080/drivers/1?firstname=?&lastname=?
	 */
	@RequestMapping(value = "/{id}", method = RequestMethod.POST)
	public ResponseEntity<?> updateCustomer(@PathVariable("id") long id,
			@RequestParam(value = "firstname", required = false) String firstName,
			@RequestParam(value = "lastname", required = false) String lastName,
			@RequestParam(value = "gender", required = false) String gender,
			@RequestParam(value = "password", required = false) String password,
			@RequestParam(value = "company_name", required = false) String companyName,
			@RequestParam(value = "address", required = false) String address) {
		return editCustomer(id, firstName, lastName, gender, password, companyName, address);
	}

	private ResponseEntity<?> findAllCustomers() {
		jsonResponse = new CustomResponse();
		List<Customer> customers = customerRepo.findAll();
		//
		if (customers.isEmpty()) {
			jsonResponse.setCode(HttpStatus.NO_CONTENT.value());
			jsonResponse.setMessage("No customers added.");
			return new ResponseEntity<CustomResponse>(jsonResponse, HttpStatus.OK);
		}
		return new ResponseEntity<List>(customers, HttpStatus.CREATED);
	}

	private ResponseEntity<?> findCustomersByFirstName(String firstName) {
		jsonResponse = new CustomResponse();
		List<Customer> customers = customerRepo.findByFirstNameAllIgnoreCase(firstName);
		if (customers.isEmpty()) {
			log.info("search returned empty");
			jsonResponse.setCode(HttpStatus.NO_CONTENT.value());
			jsonResponse.setMessage("No results for given search");
			return new ResponseEntity<CustomResponse>(jsonResponse, HttpStatus.OK);
		}
		return new ResponseEntity<List>(customers, HttpStatus.CREATED);
	}

	private ResponseEntity<?> findCustomersByFirstAndLastName(String firstName, String LastName) {
		jsonResponse = new CustomResponse();
		List<Customer> customers = customerRepo.findByFirstNameAndLastNameAllIgnoreCase(firstName, firstName);
		if (customers.isEmpty()) {
			log.info("search returned empty");
			jsonResponse.setCode(HttpStatus.NO_CONTENT.value());
			jsonResponse.setMessage("No results for given search");
			return new ResponseEntity<CustomResponse>(jsonResponse, HttpStatus.OK);
		}
		return new ResponseEntity<List>(customers, HttpStatus.CREATED);
	}

	private ResponseEntity<?> addCustomer(String phoneNumber, String firstName, String lastName, String gender) {
		CustomerResponse jsonResponse = new CustomerResponse();
		// jsonResponse = new CustomResponse();

		String otpSessionId;
		// send sms to verify the phoneNumber
		otpSessionId = sendOTP(phoneNumber);
		log.info("optsent session id = " + otpSessionId);
		if (otpSessionId.equals("0")) {
			jsonResponse.setCode(AppConfig.SENDING_OTP_FAILED);
			jsonResponse.setMessage("Sending OTP failed");
			return new ResponseEntity<CustomerResponse>(jsonResponse, HttpStatus.INTERNAL_SERVER_ERROR);
		} else {
			try {
				Customer customer = new Customer(phoneNumber);
				customer.setGender(gender); // default value
				customer.setPassword(""); // default value
				customer.setFirstName(firstName); // default value
				customer.setLastName(lastName); // default value
				customerRepo.save(customer);
				jsonResponse.setCustomer(customer);
				jsonResponse.setSessionId(otpSessionId);
				jsonResponse.setMessage("Customer info saved");
			} catch (Exception ex) {
				log.error("Error in saving customer infor ", ex);
				jsonResponse.setCode(HttpStatus.PRECONDITION_FAILED.value());
				jsonResponse.setMessage(ex.getMessage());
				return new ResponseEntity<CustomerResponse>(jsonResponse, HttpStatus.OK);
			}
			return new ResponseEntity<CustomerResponse>(jsonResponse, HttpStatus.CREATED);
		}

	}

	private String sendOTP(String phoneNumber) {
		OTPService otpService = new OTPService();
		return otpService.sendOTP(phoneNumber);
	}

	private ResponseEntity<?> editCustomer(long id, String firstName, String lastName, String gender, String password,
			String companyName, String address) {
		jsonResponse = new CustomResponse();
		try {
			Customer customer = customerRepo.findOne(id);
			if (firstName != null && !firstName.isEmpty()) {
				customer.setFirstName(firstName);
			}

			if (lastName != null && !lastName.isEmpty()) {
				customer.setLastName(lastName);
			}

			if (gender != null && !gender.isEmpty()) {
				customer.setGender(gender);
			}

			if (password != null && !password.isEmpty()) {
				customer.setPassword(password);
			}

			if (companyName != null && !companyName.isEmpty()) {
				customer.setPassword(companyName);
			}

			if (address != null && !address.isEmpty()) {
				customer.setPassword(address);
			}

			customerRepo.save(customer);
		} catch (Exception ex) {
			jsonResponse.setCode(HttpStatus.PRECONDITION_FAILED.value());
			jsonResponse.setMessage(ex.getMessage());
			return new ResponseEntity<CustomResponse>(jsonResponse, HttpStatus.OK);
		}

		jsonResponse.setMessage("Customer info updated!");
		return new ResponseEntity<CustomResponse>(jsonResponse, HttpStatus.CREATED);
	}

	@RequestMapping(value = "/login", method = RequestMethod.POST)
	public ResponseEntity<?> login(@RequestParam(value = "phonenumber") String phoneNumber,
			@RequestParam(value = "password") String password,
			@RequestParam(value = "android_registrationid", required = false) String androidRegistrationId,
			@RequestParam(value = "ios_registrationid", required = false) String iosRegistrationId) {
		return signin(phoneNumber, password, androidRegistrationId, iosRegistrationId);
	}

	private ResponseEntity<?> signin(String phoneNumber, String password, String androidRegistrationId,
			String iosRegistrationId) {

		CustomerResponse jsonResponse = new CustomerResponse();
		// Driver driver =
		// driverRepo.findOneByPhoneNumberAndPassword(phoneNumber,
		// passwordEncoder.encode(password));
		Customer driver = customerRepo.findOneByPhoneNumberAndPassword(phoneNumber, password);
		if (driver != null) {
			// JwtTokenUtil util = new JwtTokenUtil();
			// String token = util.generateDriverToken(driver);
			// logger.info("api auth JWT = " + token);
			// jsonResponse.setToken(token);

			if (androidRegistrationId != null) {
				driver.setAndroidRegistrationId(androidRegistrationId);
			} else {
				driver.setIosRegistrationId(iosRegistrationId);
			}
			driver.setVerified(1);
			customerRepo.save(driver);

			// ArrayList<VehicleRequest> r = getVehicleRequests(driver.getId());
			// driver.setVehicleRequests(r);

			jsonResponse.setMessage("Success");
			jsonResponse.setCustomer(driver);
			return new ResponseEntity<CustomResponse>(jsonResponse, HttpStatus.OK);
		} else {
			jsonResponse.setCode(AppConfig.INVALID_CREDENTIALS);
			jsonResponse.setMessage("Login failed");
			return new ResponseEntity<CustomResponse>(jsonResponse, HttpStatus.BAD_REQUEST);
		}
	}

	@RequestMapping(value = "/nearybys", method = RequestMethod.GET)
	public ResponseEntity<?> getDriverByFirstAndLastName(@RequestParam(value = "lat") Double lat,
			@RequestParam(value = "lan") Double lan) {
		return getNearByDriverLocations(lat, lan);
	}

	private ResponseEntity<?> getNearByDriverLocations(Double lat, Double lan) {
		NearyByDriversResponse response = new NearyByDriversResponse();
		List<Driverlocation> allNearBys = driverLocRepo.findAll();
		response.setCount(allNearBys.size());
		response.setNearBys(
				allNearBys.stream().map(x -> Pair.of(x.getLatitude(), x.getLongitude())).collect(Collectors.toList()));
		return new ResponseEntity<NearyByDriversResponse>(response, HttpStatus.OK);

	}
}
