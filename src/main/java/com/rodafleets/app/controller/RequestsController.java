package com.rodafleets.app.controller;

import java.util.List;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.rodafleets.app.config.AppConfig;
import com.rodafleets.app.dataaccess.RequestsRepository;
import com.rodafleets.app.model.Requests;
import com.rodafleets.app.response.CustomResponse;
import com.rodafleets.app.response.DriverResponse;
import com.rodafleets.app.service.FCMService;
import com.rodafleets.app.service.OTPService;

/*===================  Requests API  =================== */

@RestController    // This means that this class is a Controller
@RequestMapping(path="/" + AppConfig.API_VERSION + "/requests") // This means URL's start with /requests after API base url
public class RequestsController {
	
	private static final Logger logger = LoggerFactory.getLogger(DriverController.class);
	private CustomResponse jsonResponse;

	@Autowired // This means to get the bean called userRepository
	// Which is auto-generated by Spring, we will use it to handle the data
	private RequestsRepository requestsRepo;
	
	/*
	 * Retrive all drivers and their info
	 * @Url: localhost:8080/drivers
	 */
	@RequestMapping(value = "/{customer_id}", method = RequestMethod.GET)
	public ResponseEntity<?> getAllRequestsByCustomer(@PathVariable("customer_id") long customerId) {
		return findAllRequestsByCustomer(customerId);
	}
	
	/*
	 * Retrive all drivers and their info
	 * @Url: localhost:8080/drivers
	 */
	@RequestMapping(value = "/send", method = RequestMethod.GET)
	public ResponseEntity<?> sendNotification() {
		
		logger.info("1 here");
		
		String deviceToken = "f26AeNiKDnw:APA91bH8HC42KhoHewnz96J5T-IP0LTIs3icbbjsZWCIfZnx8N73TjdrQXl4456xsfmxxbspsyjVkeBVxoctKtVm46VGNLjYWLjm71xuejjnGRafvCfL1L0oB8FGflYyHHeqwQZUsaSY";
		FCMService fcmService = new FCMService();
		fcmService.sendNotification(deviceToken);
		
		return new ResponseEntity<CustomResponse>(jsonResponse, HttpStatus.OK);
	}
	
	/*
	 * Retrive all drivers and their info
	 * @Url: localhost:8080/drivers
	 */
	@RequestMapping(value = "/{customer_id}", method = RequestMethod.POST)
	public ResponseEntity<?> saveRequest(
			@PathVariable("customer_id") long customerId,
			@RequestParam(value="vehicletype_id") long vehicleTypeId,
			@RequestParam(value="pickup_lat") double pickupPointLat,
			@RequestParam(value="pickup_lng") double pickupPointLng,
			@RequestParam(value="drop_lat") double dropPointLat,
			@RequestParam(value="drop_lng") double dropPointLng,
			@RequestParam(value="loading_required", defaultValue="0") long loadingRequired,
			@RequestParam(value="unloading_required", defaultValue="0") long unloadingRequired,
			@RequestParam(value="fare_estimate_in_cents") long fareEstimateInCents) {
		return addRequest(customerId, vehicleTypeId, pickupPointLat, pickupPointLng, dropPointLat, dropPointLng, loadingRequired, unloadingRequired, fareEstimateInCents);
	}
	
	private ResponseEntity<?> findAllRequestsByCustomer(long customerId) {
		jsonResponse = new CustomResponse();
		List<Requests> requests = requestsRepo.findRequestsByCustomerId(customerId);
		if(requests.isEmpty()) {
			logger.info("search returned empty");
			jsonResponse.setCode(HttpStatus.NO_CONTENT.value());
			jsonResponse.setMessage("No requests from this customer");
			return new ResponseEntity<CustomResponse>(jsonResponse, HttpStatus.OK);
		}	    
		return new ResponseEntity<List>(requests, HttpStatus.CREATED);
	}

	private ResponseEntity<?> addRequest(long vehicleTypeId, long customerId, double pickupPointLat, double pickupPointLng,
			double dropPointLat, double dropPointLng, long loadingRequired, long unloadingRequired, long fareEstimateInCents) {
		jsonResponse = new CustomResponse();
		try {
			Requests request = new Requests(customerId, vehicleTypeId, pickupPointLat, pickupPointLng, dropPointLat, dropPointLng, loadingRequired, unloadingRequired, fareEstimateInCents);
			requestsRepo.save(request);
		}
		catch (Exception ex) {
			jsonResponse.setCode(HttpStatus.PRECONDITION_FAILED.value());
			jsonResponse.setMessage(ex.getMessage());
			return new ResponseEntity<CustomResponse>(jsonResponse, HttpStatus.OK);
		}

		jsonResponse.setMessage("Driver info saved");	    
		return new ResponseEntity<CustomResponse>(jsonResponse, HttpStatus.CREATED);
	}
}
