package com.rodafleets.app.controller;

import java.util.List;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.rodafleets.app.config.AppConfig;
import com.rodafleets.app.dataaccess.VehicleRepository;
import com.rodafleets.app.model.Vehicle;
import com.rodafleets.app.response.CustomResponse;

/*===================  Vehicles API  =================== */

@RestController    // This means that this class is a Controller
@RequestMapping(path="/" + AppConfig.API_VERSION)
public class VehicleController {

	private static final Logger log = LoggerFactory.getLogger(VehicleController.class);
	private CustomResponse jsonResponse;

	@Autowired // This means to get the bean called userRepository
	// Which is auto-generated by Spring, we will use it to handle the data
	private VehicleRepository vehicleRepo;

	/*
	 * Retrive all drivers and their info
	 * @Url: localhost:8080/drivers/1/vehicles
	 */
	@RequestMapping(value = "/drivers/{driver_id}/vehicles", method = RequestMethod.GET)
	public ResponseEntity<?> getAllVehicles(@PathVariable("driver_id") long driverId) {
		return findAllVehicles(driverId);
	}

	/*
	 * Retrive all drivers and their info
	 * @Url: localhost:8080/vehicles/1
	 */
	@RequestMapping(value = "/vehicles/{vehicle_id}", method = RequestMethod.GET)
	public ResponseEntity<?> getVehicleById(@PathVariable("vehicle_id") long vehicleId) {
		return findVehicleById(vehicleId);
	}

	/*
	 * Retrive all drivers and their info
	 * @Url: localhost:8080/vehicles?vehicle_number=ka5smb2001
	 */
	@RequestMapping(value = "/vehicles", method = RequestMethod.GET)
	public ResponseEntity<?> getVehicleByNumber(@RequestParam(value="vehicle_number") String vehicleNumber) {
		return findVehicleByNumber(vehicleNumber);
	}

	@RequestMapping(value = "/drivers/{driver_id}/vehicles", method = RequestMethod.POST)
	public ResponseEntity<?> saveVehicle(
			@PathVariable("driver_id") long driverId,
			@RequestParam(value="number") String number,
			@RequestParam(value="vehicletype_id") long typeId,
			@RequestParam(value="owner_firstname", required = false) String ownerFirstName,
			@RequestParam(value="owner_lastname", required = false) String ownerLastName,
			@RequestParam(value="owner_phonenumber", required = false) String ownerPhonenumber
			) {
		return addVehicle(driverId, number, typeId, ownerFirstName, ownerLastName, ownerPhonenumber);
	}

	private ResponseEntity<?> findAllVehicles(long driverId) {
		jsonResponse = new CustomResponse();
		List<Vehicle> vehicles = vehicleRepo.findByDriverId(driverId);

		if(vehicles.isEmpty()) {
			jsonResponse.setCode(HttpStatus.NO_CONTENT.value());
			jsonResponse.setMessage("No vehicles added for this driver");
			return new ResponseEntity<CustomResponse>(jsonResponse, HttpStatus.OK);
		}	    
		return new ResponseEntity<List>(vehicles, HttpStatus.OK);
	}

	private ResponseEntity<?> findVehicleById(long vehicleId) {
		// TODO Auto-generated method stub
		return null;
	}

	private ResponseEntity<?> findVehicleByNumber(String vehicleNumber) {
		jsonResponse = new CustomResponse();
		List<Vehicle> vehicles = vehicleRepo.findByNumber(vehicleNumber);

		if(vehicles.isEmpty()) {
			jsonResponse.setCode(HttpStatus.NO_CONTENT.value());
			jsonResponse.setMessage("No record found for this vehicle number");
			return new ResponseEntity<CustomResponse>(jsonResponse, HttpStatus.OK);
		}	    

		return new ResponseEntity<List>(vehicles, HttpStatus.OK);
	}

	private ResponseEntity<?> addVehicle(long driverId, String number, long typeId, String ownerFirstName, String ownerLastName, String ownerPhonenumber) {
		jsonResponse = new CustomResponse();
//		try {
			Vehicle vehicle = new Vehicle(driverId, number, typeId);
			
			if (ownerFirstName != null && !ownerFirstName.isEmpty()) {
			
			}
			
			if (ownerLastName != null && !ownerLastName.isEmpty()) {
			
			}
			
			if (ownerPhonenumber != null && !ownerPhonenumber.isEmpty()) {

			}
			vehicleRepo.save(vehicle);
//		}
//		catch (Exception ex) {
//			jsonResponse.setCode(HttpStatus.PRECONDITION_FAILED.value());
//			jsonResponse.setMessage(ex.getMessage());
//			return new ResponseEntity<CustomResponse>(jsonResponse, HttpStatus.OK);
//		}

		jsonResponse.setMessage("Vehicle info saved");	    
		return new ResponseEntity<CustomResponse>(jsonResponse, HttpStatus.CREATED);
	}
}
