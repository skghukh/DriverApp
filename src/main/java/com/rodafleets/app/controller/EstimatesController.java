package com.rodafleets.app.controller;

import org.json.JSONObject;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.rodafleets.app.config.AppConfig;
import com.rodafleets.app.dataaccess.VehicleTypeRepository;
import com.rodafleets.app.model.VehicleType;
import com.rodafleets.app.response.CustomResponse;
import com.rodafleets.app.response.EstimatesResponse;
import com.rodafleets.app.util.RestUtils;

@RestController    // This means that this class is a Controller
@RequestMapping(path="/" + AppConfig.API_VERSION + "/estimates") // This means URL's start with /requests after API base url
public class EstimatesController {
	
	private static final Logger log = LoggerFactory.getLogger(DriverController.class);
	private CustomResponse jsonResponse;
	
	@Autowired // This means to get the bean called userRepository
	// Which is auto-generated by Spring, we will use it to handle the data
	private VehicleTypeRepository vehicleTypeRepo;
	/*
	 * 
	 * @RequestParam: firstname
	 * @RequestParam: lastname
	 * @Url: localhost:8080/drivers/
	 */
	
	@RequestMapping(value = "/{vehicletype_id}", method = RequestMethod.POST)
	public ResponseEntity<?> estimateTripCost(
			@PathVariable("vehicletype_id") long vehicleTypeId,
			@RequestParam(value="pickup_lat") double pickupPointLat,
			@RequestParam(value="pickup_lng") double pickupPointLng,
			@RequestParam(value="drop_lat") double dropPointLat,
			@RequestParam(value="drop_lng") double dropPointLng,
			@RequestParam(value="loading_required", defaultValue="0") long loadingRequired,
			@RequestParam(value="unloading_required", defaultValue="0") long unloadingRequired) {
		return calculateTripCost(vehicleTypeId, pickupPointLat, pickupPointLng, dropPointLat, dropPointLng, loadingRequired, unloadingRequired);
	}

	private ResponseEntity<?> calculateTripCost(long vehicleTypeId, double pickupPointLat, double pickupPointLng,
			double dropPointLat, double dropPointLng, long loadingRequired, long unloadingRequired) {
		EstimatesResponse jsonResponse = new EstimatesResponse();
		try {
			//calculate distance and time between pickup and drop.
			RestUtils utils = new RestUtils();
			//JSONObject distObj = utils.distance(pickupPointLat, pickupPointLng, dropPointLat, dropPointLng);
			String str = "{\"destination_addresses\":[\"Diamond District, H A L Old Airport Rd, ISRO Colony, Domlur, Bengaluru, Karnataka 560008, India\"],\"origin_addresses\":[\"43, 20th L Cross Rd, AVS Layout, Koramangala, Bengaluru, Karnataka 560095, India\"],\"rows\":[{\"elements\":[{\"distance\":{\"text\":\"6.0 km\",\"value\":6044},\"duration\":{\"text\":\"17 mins\",\"value\":1034},\"status\":\"OK\"}]}],\"status\":\"OK\"}";
			JSONObject apiResponse = new JSONObject(str);
			if(apiResponse.getString("status").equalsIgnoreCase("OK")) {
				
				//return the first calculated route info for approx fare estimate
				JSONObject distanceMatrixObj = apiResponse.getJSONArray("rows").getJSONObject(0).getJSONArray("elements").getJSONObject(0);
				
				//get default fare info for given vehicle type
				VehicleType vehicleType = vehicleTypeRepo.findOne(vehicleTypeId);
				
				if(vehicleType != null) {
					JSONObject distObj = distanceMatrixObj.getJSONObject("distance");
					JSONObject durationObj = distanceMatrixObj.getJSONObject("duration");
					
					log.info("distance text = " + distObj.getString("text"));
					log.info("duration text = " + durationObj.getString("text"));
					
					long subTotalInCents = 0;
					long distanceFareInCents = 0;
					long rideTimeFareInCents = 0;
					
					long baseFareInCents = vehicleType.getBaseFareInCents();
					//calculate distanceFare
					long additionalKmsToCalculate = (distObj.getLong("value")/1000) - vehicleType.getBaseFareKms();
					log.info("additionalKmsToCalculate = " + additionalKmsToCalculate);
					if(additionalKmsToCalculate > 0) {
						for(long i=1; i<=additionalKmsToCalculate; i=i+vehicleType.getDistanceFareKms()) {
							distanceFareInCents = distanceFareInCents + vehicleType.getDistanceFareInCents();
						}
					}
					//calculate rideTimeFare
					rideTimeFareInCents = durationObj.getLong("value") / 60 * vehicleType.getRideTimeFareInCents();
							
					log.info("distanceFareInCents = " + distanceFareInCents);
					log.info("rideTimeFareInCents = " + rideTimeFareInCents);
					
					subTotalInCents = baseFareInCents + distanceFareInCents + rideTimeFareInCents;
					
					log.info("subTotalInCents = " + subTotalInCents);
					
					jsonResponse.setMessage("");
					jsonResponse.setDistance(distObj.getString("text"));
					jsonResponse.setDuration(durationObj.getString("text"));
					jsonResponse.setTotalFareInCents(subTotalInCents + "");
					return new ResponseEntity<CustomResponse>(jsonResponse, HttpStatus.OK);
				} else{
					log.info("======= 2");
					jsonResponse.setCode(AppConfig.INVALID_VEHICLE_TYPE_ID);
					jsonResponse.setMessage("Invalid vehicle type");
					return new ResponseEntity<CustomResponse>(jsonResponse, HttpStatus.NOT_FOUND);
				}
			} else{
				log.info("======= 2222");
//				jsonResponse.setCode(AppConfig.INVALID_REQUEST);
				jsonResponse.setMessage(apiResponse.getString("status"));
				return new ResponseEntity<CustomResponse>(jsonResponse, HttpStatus.INTERNAL_SERVER_ERROR);
			}
		}catch (Exception ex) {
			log.info("======= 444");
			jsonResponse.setCode(HttpStatus.PRECONDITION_FAILED.value());
			jsonResponse.setMessage(ex.getMessage());
			return new ResponseEntity<CustomResponse>(jsonResponse, HttpStatus.OK);
		}
	}
	
	
}
